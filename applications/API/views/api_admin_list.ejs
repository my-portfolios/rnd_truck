<script>
	var selectOptionYn = [
		{text: '예', value: 'Y'},
		{text: '아니오', value: 'N'}
	];
	
    var dgMain;
    $(function() {
        dgMain = new tui.Grid({
            el: $('#dgMain')[0],
		    scrollX: true,
		    scrollY: true,
			bodyHeight: 500,
		    rowHeaders: ['rowNum'],
		    columns: [
			    {
			    	header: 'API 앱이름',
			    	name: 'apiAppNm',
                    align: 'center',
                    width: 220,
			    	resizable: true,
			    	sortable: true
				},
				{
			    	header: '신청자',
			    	name: 'createId',
			    	align: 'center',
			    	width: 100,
			    	resizable: true,
			    	sortable: true
                },
			    {
			    	header: '베이스카',
			    	name: 'apiUseBasecar',
                    align: 'center',
                    width: 130,
			    	resizable: true,
					sortable: true
					, formatter: function(props) { return TuiGridUtility.selectOptionFormatter(selectOptionYn, props); }
			    },
			    {
			    	header: '장치',
			    	name: 'apiUseEquipment',
			    	align: 'center',
			    	width: 130,
			    	resizable: true,
					sortable: true
					, formatter: function(props) { return TuiGridUtility.selectOptionFormatter(selectOptionYn, props); }
                },
                {
			    	header: '완성차',
			    	name: 'apiUseProdcar',
			    	align: 'center',
			    	width: 130,
			    	resizable: true,
					sortable: true
					, formatter: function(props) { return TuiGridUtility.selectOptionFormatter(selectOptionYn, props); }
                },
                {
			    	header: '회원',
			    	name: 'apiUseUser',
			    	align: 'center',
			    	width: 130,
			    	resizable: true,
					sortable: true
					, formatter: function(props) { return TuiGridUtility.selectOptionFormatter(selectOptionYn, props); }
				},
				{
			    	header: '사용여부',
			    	name: 'useYn',
			    	align: 'center',
			    	width: 130,
			    	resizable: true,
					sortable: true
					, editor: {
						type: 'select',
						options: {
							listItems: selectOptionYn
						}
				    }
					, formatter: function(props) { return TuiGridUtility.selectOptionFormatter(selectOptionYn, props); }
				},
				{
			    	header: '만료일자',
			    	name: 'apiExpireAt',
                    align: 'center',
                    width: 150,
			    	resizable: true,
			    	sortable: true
			    },
				{
			    	header: '신청일시',
			    	name: 'createDt',
			    	align: 'center',
			    	width: 180,
			    	resizable: true,
			    	sortable: true
				}
			]
		});
		
		searchMain();
    });

    function searchMain() {
        $.get('/openapi/list/data/manage', function(data) {
			if(data.result != null && data.result == false) {
				alert('API 현황을 가져오는 데 실패하였습니다.');	
			} else { dgMain.resetData(data); }
		}).fail(function(e) {
			alert('API 현황을 가져오는 데 실패하였습니다.');
		});
    }

    function updateMain() {
		var updateList = dgMain.getModifiedRows().updatedRows;
		if(updateList.length == 0) {
			alert('수정된 내용이 없습니다.');
			return false;
		}

		$.post('/openapi/update/data/manage/?_method=put', {
			updateList: JSON.stringify(updateList)
		}, function(event) {
			if(event.result == false) {
				switch(event.code) {
					case -1:
						alert('로그인이 필요합니다.');	
						location.href='/auth/login';
					break;
					case -2:
						alert('관리자만 가능합니다.');	
					break;
					default:
						alert('저장에 실패하였습니다.');	
					break;
				}
			} else {
				alert('저장하였습니다.');
				searchMain();
			}
		}).fail(function() {
			alert('저장에 실패하였습니다.');
		});
	}
</script>

<!--검색영역-->
<div class="row">
	<div class="col-md-4 col-xs-12 text-left">
		<div class="btn-group" role="group" aria-label="...">
			<input type="button" onclick="updateMain();" value="저장" class="btn btn-sm btn-danger"/>
			<input type="button" onclick="location.href='/openapi/reGenKeys'" value="API 키 재발급" class="btn btn-sm btn-danger"/>
		</div>
  	</div>
</div>

<!--검색영역-->

<div id="dgMain"></div>
